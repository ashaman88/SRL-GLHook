type
  GLH_StringExtract = (GLH_Letters, GLH_Numbers, GLH_AlphaNumeric, GLH_Others);

Function GLH_CharInRange(C: Char; RangeType: GLH_StringExtract): Boolean;
Begin
  Case RangeType Of
    GLH_Numbers      : Result := ('0' <= C) And (C <= '9');
    GLH_Letters      : Result := (('A' <= C) And (C <= 'Z')) Or (('a' <= C) And (C <= 'z'));
    GLH_AlphaNumeric : Result := (('0' <= C) And (C <= '9')) Or ((('A' <= C) And (C <= 'Z')) Or (('a' <= C) And (C <= 'z')));
    GLH_Others       : Result := Not ((('0' <= C) And (C <= '9')) Or ((('A' <= C) And (C <= 'Z')) Or (('a' <= C) And (C <= 'z'))));
  End;
End;

Function GLH_ExtractFromString(Text: String; Extract: GLH_StringExtract): String;
var
  I: Integer;
Begin
  For I := Length(Text) DownTo 1 Do
    If GLH_CharInRange(Text[I], Extract) Then
      Result := Text[I] + Result;
End;

Function GLH_GetUpTextEx(MinHSpacing, MinVSpacing: Integer): String;
var
  Texts: TStringArray;
Begin
  Texts := GLHook_FontsToText(GLHook_GetFontsByArea(IntToBox(GLC_UpTextX1, GLC_UpTextY1, GLC_UpTextX2, GLC_UpTextY2)), True, MinHSpacing, MinVSpacing);
  If (Length(Texts) < 1) Then Exit;
  Result := Texts[0];
End;

Function GLH_GetUpText: String;
Begin
  Result := GLH_GetUpTextEx(4, 10);
End;

Function GLH_IsUpTextEx(Text: String): Boolean;
Begin
  Text := Replace(Text, '?', '.');
  Result := ExecRegExpr('.*' + Text + '.*', GLH_GetUpText);
End;

Function GLH_IsUpTextRe(RegEx: String): Boolean;
Begin
  Result := ExecRegExpr(RegEx, GLH_GetUpText);
End;

Function GLH_IsUpText(Text: String): Boolean;
Begin
  Result := (Pos(Text, GLH_GetUpText) > 0);
End;

Function GLH_IsUpTextMulti(Text: TStringArray): Boolean;
var
  I, H: Integer;
  Uptext: String;
Begin
  Uptext := GLH_GetUpText;
  H := High(Text);
  For I := 0 To H Do
    If (Pos(Text[I], UpText) > 0) Then
    Begin
      Result := True;
      Exit;
    End;
End;

Function GLH_GetLevelAtPos(X, Y: Integer): Integer;
Begin
  MMouse(X, Y, 5, 5);
  Wait(RandomRange(80, 150));
  Result := StrToIntDef(Between('l: ', ')', GLH_GetUpText), -1);
End;

Function GLH_FindNPCChatTextMulti(Texts: TStringArray; Action: fnct_ActionOptions): Boolean;
var
  TP: TPoint;
  H, I, J, L: Integer;
  Info: TTextInfoArray;
  Options: TPanelArray;
Begin
  Info := GLHook_FontsToTextEx(GLHook_GetFontsByArea(IntToBox(72, 427, 447, 518)), False, 4, 10);
  If (Length(Info) < 1) Then Exit;

  Options := GLHook_GetItemsByID(GLI_NPC_Chat_Options);
  If (Length(Options) < 1) Then Exit;

  H := High(Options);
  For I := 0 To H Do
  Begin
    Info[J].Area.X1 := Options[I].SX[0];
    Info[J].Area.Y1 := Options[I].SY[0];
    Inc(I);

    Info[J].Area.X2 := Options[I].SX[2];
    Info[J].Area.Y2 := Options[I].SY[2];
    Inc(J);
  End;

  H := High(Info);
  L := High(Texts);
  TP := Point(-1, -1);

  For I := 0 To L Do
    For J := 0 To H Do
      If (Pos(Texts[I], Info[J].Text) > 0) Then
        TP := MiddleBox(Info[J].Area);

  If (TP <> Point(-1, -1)) Then
  Begin
    GLHook_ShowNavBar;
    Case Action Of
      Move: MMouse(TP.X, TP.Y, 6, 3);
      ClickLeft: Mouse(TP.X, TP.Y, 6, 3, MOUSE_LEFT);
      ClickRight: Mouse(TP.X, TP.Y, 6, 3, MOUSE_RIGHT);
    End;
    GLHook_HideNavBar;
    Result := True;
  End;
End;

Function GLH_FindNPCChatText(Text: String; Action: fnct_ActionOptions): Boolean;
Begin
  Result := GLH_FindNPCChatTextMulti([Text], Action);
End;

Function GLH_GetChooseOptions(var MenuBounds: TBox): TTextInfoArray;
var
  TopCorner, LowCorner: TPanelArray;
Begin
  TopCorner := GLHook_GetItemsByMeanID(GLI_Texture_OptionMenuTopCorner, GLIM_Texture_OptionMenuTopCorner, 5);
  LowCorner := GLHook_GetItemsByMeanID(GLI_Texture_OptionMenuLowCorner, GLIM_Texture_OptionMenuLowCorner, 5);

  If ((Length(TopCorner) < 1) Or (Length(LowCorner) < 1)) Then Exit;

  MenuBounds := IntToBox(TopCorner[0].SX[1], TopCorner[0].SY[1], LowCorner[1].SX[2], LowCorner[1].SY[2]);
  Result := GLHook_FontsToTextEx(GLHook_GetFontsByArea(MenuBounds), True, 4, 7);
End;

Function GLH_ChooseOptionMultiEx(Texts: TStringArray; Action: Fnct_ActionOptions): Boolean;
var
  MP: TPoint;
  Bounds: TBox;
  MenuBounds: TBox;
  I, II, H, L: Integer;
  TextInfo: TTextInfoArray;
Begin
  Result := False;
  TextInfo := GLH_GetChooseOptions(MenuBounds);
  If (Length(TextInfo) < 1) Then
    Exit;

  H := High(TextInfo);
  L := High(Texts);

  For I := 0 To L Do
    For II := H DownTo 0 Do
      If (Pos(Texts[I], TextInfo[II].Text) > 0) Then
      Begin
        Result := True;
        Bounds := TextInfo[II].Area;
        GetMousePos(MP.X, MP.Y);

        GLHook_ShowNavBar;
        Case Action Of
          ClickLeft:
                       If PointInBox(MP, Bounds) Then
                         ClickMouse2(True)
                       Else
                         MouseBoxEx(Bounds.X1, Bounds.Y1, Bounds.X2, Bounds.Y1, 5, MOUSE_LEFT);

          Move:        If (Not PointInBox(MP, Bounds)) Then
                         MouseBoxEx(Bounds.X1, Bounds.Y1, Bounds.X2, Bounds.Y1, 5, MOUSE_MOVE);

          Nothing:      Begin End;

          Else
            Srl_Warn('GLH_ChooseOptionMultiEx', 'ClickRight Not A Valid Click For RS Menus!', Warn_AllVersions);
        End;
        GLHook_HideNavBar;
        Exit;
      End;

  If (Action <> Nothing) Then
  Begin
    I := Max(MenuBounds.X1 - 52, 0);
    If (I = 0) Then
      I := MenuBounds.X2 + 10;
    GLHook_ShowNavBar;
    MMouse(I, Max(MenuBounds.Y1 - 50, 0), 40, MenuBounds.Y2 - MenuBounds.Y1);
    GLHook_HideNavBar;
    Wait(200 + Random(100));
  End;
End;

Function GLH_ChooseOptionMulti(Options: TStringArray): Boolean;
Begin
  Result := GLH_ChooseOptionMultiEx(Options, ClickLeft);
End;

Function GLH_ChooseOptionEx(Option: String): Boolean;
Begin
  Result := GLH_ChooseOptionMultiEx([Option], ClickLeft);
End;

Function GLH_ChooseOption(Option: String): Boolean;
Begin
  Result := GLH_ChooseOptionMultiEx([Option], ClickLeft);
End;

Function GLH_OptionsExist(Options: TStringArray; MoveMouse: Boolean): Boolean;
Begin
  If MoveMouse Then
    Result := GLH_ChooseOptionMultiEx(Options, Move)
  Else
    Result := GLH_ChooseOptionMultiEx(Options, Nothing);
End;
