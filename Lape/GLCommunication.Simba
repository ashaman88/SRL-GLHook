{*
  This File May NOT be Copied, Modified OR Translated for any purposes other than updating the SRL-GLHook Library.

  By: Brandon-T.
*}

{$IFDEF GLHook}
  {$loadlib GLHook}
{$ENDIF}

type pByte = ^Byte;
type pInt  = ^Integer;
type pBool = ^Boolean;
type pFloat = ^Single;

type TModel = record
  ID: Cardinal;
  SX, SY: Integer;
  Stride: Cardinal;
  TriangleCount: Integer;
end;

type TPanelItem = record
  X, Y: Integer;
  BaseID: Integer;
  MeanID: Integer;
  TextureID: Integer;
  SX, SY: Array [0..3] Of Integer;
end;

type TTextInfo = record
  Area: TBox;
  Text: String;
  Colour: Integer;
end;

type TTextColour = Record
  Text: String;
  Areas: Array Of TBox;
  Colours: Array Of Integer;
End;

type TFontInfo = record
  ID: Cardinal;
  R, G, B, A: Byte;
  Colour: Integer;
  X, Y: Single;
  Symbol: Char;
  Shadow: Boolean;
  Translate: Array [0..2] Of Single;
  VX, VY, TX, TY: Array [0..3] Of Integer;
end;

type PModel = ^TModel;
type PPanelItem  = ^TPanelItem;
type PFontInfo = ^TFontInfo;

type TModelArray = array of TModel;
type TPanelArray = array of TPanelItem;
type TFontArray = array of TFontInfo;
type TTextInfoArray = Array Of TTextInfo;
type TTextColourArray = Array Of TTextColour;
type T2DTextInfoArray = Array Of TTextInfoArray;

Function GLHook_GetAllItems: TPanelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  PanelPtr: PPanelItem;
begin
  Ptr := GLHGetPanelItems(Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    PanelPtr := Ptr;
    Result[I] := PanelPtr^;
    Ptr := Ptr + sizeof(TPanelItem);
  end;
end;

Function GLHook_GetItemsByID(ID: Integer): TPanelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  PanelPtr: PPanelItem;
begin
  Ptr := GLHGetItemsByID(ID, Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    PanelPtr := Ptr;
    Result[I] := PanelPtr^;
    Ptr := Ptr + sizeof(TPanelItem);
  end;
end;

Function GLHook_GetItemsByArea(Area: TBox): TPanelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  PanelPtr: PPanelItem;
begin
  Ptr := GLHGetItemsByArea(Area.X1, Area.Y1, Area.X2, Area.Y2, Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    PanelPtr := Ptr;
    Result[I] := PanelPtr^;
    Ptr := Ptr + sizeof(TPanelItem);
  end;
end;

Function GLHook_GetItemsByMeanID(BaseID, MeanID, Tolerance: Integer): TPanelArray;
var
  I, L: Integer;
  ListOfItems: TPanelArray;
begin
  ListOfItems := GLHook_GetItemsByID(BaseID);
  L := High(ListOfItems);

  For I := 0 To L Do
    If SimilarColors(ListOfItems[I].MeanID, MeanID, Tolerance) Then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[Length(Result) - 1] := ListOfItems[I];
    end;
end;

Function GLHook_GetAllModels: TModelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  ModelPtr: PModel;
begin
  Ptr := GLHGetModels(Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    ModelPtr := Ptr;
    Result[I] := ModelPtr^;
    Ptr := Ptr + sizeof(TModel);
  end;
end;

Function GLHook_GetModelsByID(ID: Cardinal): TModelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  ModelPtr: PModel;
begin
  Ptr := GLHGetModelsByID(ID, Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    ModelPtr := Ptr;
    Result[I] := ModelPtr^;
    Ptr := Ptr + sizeof(TModel);
  end;
end;

Function GLHook_GetModelsByTriangleCount(Count: Cardinal): TModelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  ModelPtr: PModel;
begin
  Ptr := GLHGetModelsByTCount(Count, Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    ModelPtr := Ptr;
    Result[I] := ModelPtr^;
    Ptr := Ptr + sizeof(TModel);
  end;
end;

Function GLHook_GetModelsByArea(Area: TBox): TModelArray;
var
  Ptr: Pointer;
  Size, I: Integer;
  ModelPtr: PModel;
begin
  Ptr := GLHGetModelsByArea(Area.X1, Area.Y1, Area.X2, Area.Y2, Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    ModelPtr := Ptr;
    Result[I] := ModelPtr^;
    Ptr := Ptr + sizeof(TModel);
  end;
end;

Function GLHook_GetAllFonts: TFontArray;
var
  Ptr: Pointer;
  Size, I: Integer;
begin
  Ptr := GLHGetFonts(Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    Result[I].ID := pInt(Ptr)^;
    Ptr := Ptr + sizeof(Integer);

    Result[I].R := pByte(Ptr)^;
    Result[I].G := pByte(Ptr + sizeof(Byte))^;
    Result[I].B := pByte(Ptr + (2 * sizeof(Byte)))^;
    Result[I].A := pByte(Ptr + (3 * sizeof(Byte)))^;
    Ptr := Ptr + (sizeof(Byte) * 4);

    Result[I].Colour := RGBToColor(Result[I].R, Result[I].G, Result[I].B);

    Result[I].X := pFloat(Ptr)^;
    Result[I].Y := pFloat(Ptr + sizeof(Single))^;
    Ptr := Ptr + (sizeof(Single) * 2);

    Result[I].Symbol := pChar(Ptr)^;
    Result[I].Shadow := pBool(Ptr + sizeof(Boolean))^;
    Ptr := Ptr + (sizeof(Char) + sizeof(Boolean)) + 2;   //Padded by 2.

    Result[I].Translate[0] := pFloat(Ptr)^;
    Result[I].Translate[1] := pFloat(Ptr + sizeof(Single))^;
    Result[I].Translate[2] := pFloat(Ptr + (2 * sizeof(Single)))^;
    Ptr := Ptr + (sizeof(Single) * 3);

    Result[I].VX[0] := pInt(Ptr)^;
    Result[I].VX[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].VX[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].VX[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);

    Result[I].VY[0] := pInt(Ptr)^;
    Result[I].VY[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].VY[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].VY[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);

    Result[I].TX[0] := pInt(Ptr)^;
    Result[I].TX[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].TX[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].TX[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);

    Result[I].TY[0] := pInt(Ptr)^;
    Result[I].TY[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].TY[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].TY[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);
  end;
end;

Function GLHook_GetFontsByArea(Area: TBox): TFontArray;
var
  Ptr: Pointer;
  Size, I: Integer;
begin
  Ptr := GLHGetFontsArea(Area.X1, Area.Y1, Area.X2, Area.Y2, Size);
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    Result[I].ID := pInt(Ptr)^;
    Ptr := Ptr + sizeof(Integer);

    Result[I].R := pByte(Ptr)^;
    Result[I].G := pByte(Ptr + sizeof(Byte))^;
    Result[I].B := pByte(Ptr + (2 * sizeof(Byte)))^;
    Result[I].A := pByte(Ptr + (3 * sizeof(Byte)))^;
    Ptr := Ptr + (sizeof(Byte) * 4);

    Result[I].Colour := RGBToColor(Result[I].R, Result[I].G, Result[I].B);

    Result[I].X := pFloat(Ptr)^;
    Result[I].Y := pFloat(Ptr + sizeof(Single))^;
    Ptr := Ptr + (sizeof(Single) * 2);

    Result[I].Symbol := pChar(Ptr)^;
    Result[I].Shadow := pBool(Ptr + sizeof(Boolean))^;
    Ptr := Ptr + (sizeof(Char) + sizeof(Boolean)) + 2;  //Padded by 2.

    Result[I].Translate[0] := pFloat(Ptr)^;
    Result[I].Translate[1] := pFloat(Ptr + sizeof(Single))^;
    Result[I].Translate[2] := pFloat(Ptr + (2 * sizeof(Single)))^;
    Ptr := Ptr + (sizeof(Single) * 3);

    Result[I].VX[0] := pInt(Ptr)^;
    Result[I].VX[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].VX[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].VX[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);

    Result[I].VY[0] := pInt(Ptr)^;
    Result[I].VY[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].VY[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].VY[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);

    Result[I].TX[0] := pInt(Ptr)^;
    Result[I].TX[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].TX[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].TX[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);

    Result[I].TY[0] := pInt(Ptr)^;
    Result[I].TY[1] := pInt(Ptr + sizeof(Integer))^;
    Result[I].TY[2] := pInt(Ptr + (2 * sizeof(Integer)))^;
    Result[I].TY[3] := pInt(Ptr + (3 * sizeof(Integer)))^;
    Ptr := Ptr + (sizeof(Integer) * 4);
  end;
end;

Function GLH_iAbs(I: Integer): Integer;
Begin
  Result := I;
  If (Result < 0) Then
    Result := Result * -1;
End;

Function GLHook_FontsToText1D(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): TTextColourArray;
var
  I, J, K, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Text: String;
  StoreColour: Boolean;
  SameLine, NewLine: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  SetLength(Result, 1);

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I < L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (StoreColour) Then
    Begin
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    NewLine := (iAbs(Y) >= MinVSpacing);
    If ((I < L) And (Fonts[I].Colour <> Fonts[I + 1].Colour) And (Not NewLine)) Then
    Begin
      SetLength(Result[K].Areas, Length(Result[K].Areas) + 1);
      SetLength(Result[K].Colours, Length(Result[K].Colours) + 1);
      Result[K].Text := Text;
      Result[K].Areas[J].X1 := IX;
      Result[K].Areas[J].Y1 := IY;
      Result[K].Areas[J].X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[K].Areas[J].Y2 := Round(Fonts[I].Y);
      Result[K].Colours[J] := Fonts[I].Colour;
      Inc(J);
      SameLine := True;
    End;

    If (NewLine) Then
    Begin
      SetLength(Result[K].Areas, Length(Result[K].Areas) + 1);
      SetLength(Result[K].Colours, Length(Result[K].Colours) + 1);
      If (Not SameLine) Then J := 0;

      Result[K].Text := Text;
      Result[K].Areas[J].X1 := Round(Fonts[I].X);
      Result[K].Areas[J].Y1 := Round(Fonts[I].Y - Fonts[I].VY[2]);
      Result[K].Areas[J].X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[K].Areas[J].Y2 := Round(Fonts[I].Y);
      Result[K].Colours[J] := Fonts[I].Colour;
      SetLength(Result, Length(Result) + 1);

      Text := '';
      J := 0; Inc(K);
      StoreColour := True;
      SameLine := False;
    End;
  End;
End;

Function GLHook_FontsToText2D(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): T2DTextInfoArray;
var
  I, J, K, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Text: String;
  StoreColour: Boolean;
  TextInfo: TTextInfoArray;
  SameLine, NewLine: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I < L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If StoreColour Then
    Begin
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    NewLine := (iAbs(Y) >= MinVSpacing);
    If ((I < L) And (Fonts[I].Colour <> Fonts[I + 1].Colour) And (Not NewLine)) Then   //If Different Colours On Line..
    Begin                                                                              //Append The Current Text To The Array..
      SetLength(TextInfo, Length(TextInfo) + 1);
      TextInfo[J].Text := Text;
      TextInfo[J].Area.X1 := IX;
      TextInfo[J].Area.Y1 := IY;
      TextInfo[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      TextInfo[J].Area.Y2 := Round(Fonts[I].Y);
      TextInfo[J].Colour := Fonts[I].Colour;
      Inc(J);
      Text := '';
      SameLine := True;
    End;

    If (NewLine) Then                     //If There's a New-Line, Append To The Current Text, Push It To The Result, Reset Everything.
    Begin
      SetLength(TextInfo, Length(TextInfo) + 1);
      If (Not SameLine) Then J := 0;

      TextInfo[J].Text := Text;
      TextInfo[J].Area.X1 := Round(Fonts[I].X);
      TextInfo[J].Area.Y1 := Round(Fonts[I].Y - Fonts[I].VY[2]);
      TextInfo[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      TextInfo[J].Area.Y2 := Round(Fonts[I].Y);
      TextInfo[J].Colour := Fonts[I].Colour;

      SetLength(Result, Length(Result) + 1);
      Result[K] := TextInfo;                   //Each Array Is One Line Of Text With A List Of All Colours.

      Text := '';
      J := 0; Inc(K);
      StoreColour := True;
      SameLine := False;
      SetLength(TextInfo, 0);
    End;
  End;
End;

Function GLHook_FontsToColourText(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TTextInfoArray;
var
  I, J, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Colour: Integer;
  Text: String;
  StoreColour: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 127)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (StoreColour) Then
    Begin
      Colour := Fonts[I].Colour;
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    If ((iAbs(Y) >= MinVSpacing) Or ((I + 1 <= L) And (Fonts[I + 1].Colour <> Colour))) Then
    Begin
      SetLength(Result, Length(Result) + 1);
      Result[J].Text := Text;
      Result[J].Area.X1 := IX;
      Result[J].Area.Y1 := IY;
      Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[J].Area.Y2 := Round(Fonts[I].Y);
      Result[J].Colour := Fonts[I].Colour;
      Inc(J);
      Text := '';
      StoreColour := True;
    End;
  End;
End;

Function GLHook_FontsToTextEx(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TTextInfoArray;
var
  I, J, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Text: String;
  StoreColour: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (StoreColour) Then
    Begin
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    If (iAbs(Y) >= MinVSpacing) Then
    Begin
      SetLength(Result, Length(Result) + 1);
      Result[J].Text := Text;
      Result[J].Area.X1 := IX;
      Result[J].Area.Y1 := IY;
      Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[J].Area.Y2 := Round(Fonts[I].Y);
      Result[J].Colour := Fonts[I].Colour;
      Inc(J);
      Text := '';
      StoreColour := True;
    End;
  End;
End;

Function GLHook_FontsToText(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TStringArray;
var
  I, L: Integer;
  X, Y: Integer;
  Text: String;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (iAbs(Y) >= MinVSpacing) Then
      Text := Text + '\n\r';
  End;

  ExplodeWrap('\n\r', Text, Result);
  For I := 0 To High(Result) Do
    Result[I] := Trim(Result[I]);
End;

Function GLHook_SplitFontsHorizontallyEx(Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TTextInfoArray;
var
  X, Y, I, J, L, IX, IY: Integer;
  MinHeight, MaxHeight: Single;
  NewLine: Boolean;
  Text: String;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  NewLine := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (NewLine) Then
    Begin
      Text := '';
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      MinHeight := Fonts[I].Y - Round(MinVSpacing / 2);
      MaxHeight := Fonts[I].Y + Round(MinVSpacing / 2);
      NewLine := False;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    If ((Fonts[I].Y >= MinHeight) And (Fonts[I].Y <= MaxHeight)) Then
      Text := Text + Fonts[I].Symbol
    Else
      Begin
        Dec(I);
        SetLength(Result, J + 1);
        Result[J].Text := Text;
        Result[J].Area.X1 := IX;
        Result[J].Area.Y1 := IY;
        Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
        Result[J].Area.Y2 := Round(Fonts[I].Y);
        Result[J].Colour := Fonts[I].Colour;
        Inc(J);
        NewLine := True;
      End;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (I = L) Then
    Begin
      SetLength(Result, J + 1);
      Result[J].Text := Text;
      Result[J].Area.X1 := IX;
      Result[J].Area.Y1 := IY;
      Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[J].Area.Y2 := Round(Fonts[I].Y);
      Result[J].Colour := Fonts[I].Colour;
    End;
  End;
End;

Function PosStrArr(ToFind: String; SearchArray: TStringArray; Var Where: Integer): Boolean;
var
  I, H: Integer;
Begin
  H := High(SearchArray);
  For I := 0 To H Do
    If (Pos(LowerCase(ToFind), LowerCase(SearchArray[I])) > 0) Then
    Begin
      Where := I;
      Result := True;
      Break;
    End;
End;

Function GLHook_CountTextInArea(Area: TBox; Text: String; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): Integer;
Var
  I, J: Integer;
  AreaFonts: TStringArray;
Begin
  Text := Lowercase(Text);
  AreaFonts := GLHook_FontsToText(GLHook_GetFontsByArea(Area), Shadow, MinHSpacing, MinVSpacing);
  For I := 0 To High(AreaFonts) Do
    For J := 1 To High(AreaFonts[I]) Do
      If (AreaFonts[I][J] = Text) Then
        Inc(Result);
End;

Function GLHook_FindTextAreaEx(var P: TPoint; Area: TBox; Texts: TStringArray; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): Boolean;
var
  H, I, J, L: Integer;
  Fonts: TFontArray;
  AreaText: TTextInfoArray;
Begin
  Fonts := GLHook_GetFontsByArea(Area);
  AreaText := GLHook_FontsToTextEx(Fonts, Shadow, MinHSpacing, MinVSpacing);

  H := High(AreaText);
  L := High(Texts);

  For I := 0 To L Do
    For J := 0 To H Do
      If (Pos(Texts[I], AreaText[J].Text) > 0) Then
      Begin
        P := MiddleBox(AreaText[J].Area);
        Result := True;
        Exit;
      End;
  P := Point(-1, -1);
  Result := False;
End;

Function GLHook_FindTextArea(var P: TPoint; Area: TBox; Text: String; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): Boolean;
Begin
  Result := GLHook_FindTextAreaEx(P, Area, [Text], Shadow, MinHSpacing, MinVSpacing);
End;
