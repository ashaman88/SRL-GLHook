Function GLH_LoggedIn: Boolean; Forward;

Function GLH_SetChat(State: GLE_ChatState; Chat: Integer): Boolean;
var
  P: TPoint;
  Area: TBox;
  Fonts: TFontArray;
  Text: TStringArray;
  Chats: TTextInfoArray;
  BoxOffset, Colour: Integer;
Begin
  If (Not InRange(Chat, CHAT_GAME, CHAT_ASSIST)) Then
  Begin
    Srl_Warn('GLH_SetChat', 'Chat(' + IntToStr(Chat) + ') Does Not Exist.', Warn_AllVersions);
    Exit;
  End;

  Result := False;
  BoxOffset := (Chat + 1) * 57;
  Area := IntToBox(2 + BoxOffset, 530, 59 + BoxOffset, 552);
  Fonts := GLHook_GetFontsByArea(Area);
  Chats := GLHook_FontsToTextEx(Fonts, True, 4, 10);
  If (Length(Chats) < 1) Then Exit;

  Case State Of
    GLE_ChatState_Off:                            Begin Colour := 255;      Text := ['Off']; End;
    GLE_ChatState_Hide:                           Begin Colour := 16777215; Text := ['Hide']; End;
    GLE_ChatState_All, GLE_ChatState_On:          Begin Colour := 65280;    Text := ['All', 'On']; End;
    GLE_ChatState_Friends, GLE_ChatState_Filter:  Begin Colour := 65535;    Text := ['Friends', 'Filter']; End;
    GLE_ChatState_XP:                             Begin Colour := 0;        Text := ['XP', 'Earned']; End;
  End;

  If (Chats[1].Colour <> Colour) Then
  Begin
    P := MiddleBox(Area);
    GLHook_ShowNavBar;
    Mouse(P.X, P.Y, 10, 10, MOUSE_RIGHT);
    GLHook_HideNavBar;
    Result := GLH_WaitOptionMulti(Text, 1000);
  End Else
    Result := True;
End;

Procedure GLH_SetAllChats(GameChat, PublicChat, PrivateChat, FriendsChat, ClanChat, TradeChat, AssistChat: GLE_ChatState);
var
  I: Integer;
  States: GLE_ChatState_Array;
Begin
  If (Not GLH_LoggedIn) Then Exit;
  States := [GameChat, PublicChat, PrivateChat, FriendsChat, ClanChat, TradeChat, AssistChat];

  For I := 0 To High(States) Do
  Begin
    If (States[I] = GLE_ChatState_None) Then Continue;
    GLH_SetChat(States[I], I);
  End;
End;

Procedure GLH_ChatsOff;
var
  I: Integer;
Begin
  For I := 1 To 6 Do
    GLH_SetChat(GLE_ChatState_Off, I);
End;

Function GLH_ClickContinueEx(Click, Wait: Boolean): Boolean;
var
  I: Integer;
  Fonts: TFontArray;
  TextInfo: TTextInfoArray;
Begin
  Fonts := GLHook_GetFontsByArea(IntToBox(MCX1, MCY1, MCX2, MCY2));
  TextInfo := GLHook_FontsToTextEx(Fonts, False, 4, 10);
  If (Length(TextInfo) < 1) Then
    Exit;

  For I := 0 To High(TextInfo) Do
  Begin
    Result := SimilarColors(TextInfo[I].Colour, 13158600, 10) And ExecRegExpr('here to conti', TextInfo[I].Text);
    If (Result And Click) Then
    Begin
      GLHook_ShowNavBar;
      Mouse(TextInfo[I].Area.X1 + RandomRange(0, 90), TextInfo[I].Area.Y1 + RandomRange(28, 32), 2, 1, True);
      GLHook_HideNavBar;
      If Wait Then ChatWait;
    End;
    If Result Then Break;
  End;
End;

Function GLH_ClickContinue(SpaceBar, DoWait: Boolean): Boolean;
var
  C, T: Integer;
  Button: TPanelArray;
Begin
  If ClickContinueEx(SpaceBar, DoWait) Then
  Begin
    Result := True;
    Exit;
  End;

  Button := GLHook_GetItemsByAreaEx(GLI_ContinueButton, GLC_MCBox);
  If (Length(Button) < 1) Then Exit;

  C := CountColor(0, MCX1, MCY1, MCX2, MCY2);
  GLHook_ShowNavBar;
  If SpaceBar then
    TypeByte(VK_SPACE)
  Else
    Mouse(Button[0].X, Button[0].Y, 5, 5, MOUSE_LEFT);
  GLHook_HideNavBar;

  Result := True;
  If DoWait then
    While (C = CountColor(0, MCX1, MCY1, MCX2, MCY2)) And (GetSystemTime < T) Do
      Wait(50+random(50));
End;

Function GLH_ClickToContinue: Boolean;
Begin
  Result := GLH_ClickContinue(True, False);
End;

Function GLH_GetChatBoxTextEx(LineNumber, Colour: Integer): String;
var
  I, H, Line: Integer;
  Fonts: TFontArray;
  TextInfo: T2DTextInfoArray;
Begin
  Fonts := GLHook_GetFontsByArea(GLC_MCBox);
  TextInfo := GLHook_FontsToText2D(Fonts, False, 3, 14);
  Line := Length(TextInfo);

  If ((Line < 1) Or (Not InRange(LineNumber, 1, 9))) Then Exit;
  If (Line < (9 - LineNumber)) Then Exit;
  Line := (9 - LineNumber);

  H := High(TextInfo[Line]);

  For I := 0 To H Do
    If (TextInfo[Line][I].Colour = Colour) Then
      Result := Result + TextInfo[Line][I].Text;
End;

Function GLH_GetChatBoxText(LineNumber: Integer): String;
var
  Line: Integer;
  Fonts: TFontArray;
  Text: TStringArray;
Begin
  Fonts := GLHook_GetFontsByArea(GLC_MCBox);
  Text := GLHook_FontsToText(Fonts, False, 3, 14);
  Line := Length(Text);

  If ((Line < 1) Or (Not InRange(LineNumber, 1, 9))) Then Exit;
  If (Line < (9 - LineNumber)) Then Exit;
  Result := Text[9 - LineNumber];
End;

Function GLH_FindChatBoxTextEx(Text: String; LineNumber, Colour: Integer): Boolean;
Begin
  Result := (Pos(Text, GLH_GetChatBoxTextEx(LineNumber, Colour)) > 0);
End;

Function GLH_FindChatBoxText(Text: String; LineNumber: Integer): Boolean;
Begin
  Result := (Pos(Text, GLH_GetChatBoxText(LineNumber)) > 0);
End;

Function GLH_IsChatBoxTextBetweenEx(Text: String; TextColour, StartLine, EndLine: Integer): Boolean;
var
  I: Integer;
Begin
  Result := True;
  For I := Max(StartLine, EndLine) Downto Min(StartLine, EndLine) Do
    If GLH_FindChatBoxTextEx(Text, I, TextColour) then
      Exit;
  Result := False;
End;

Function GLH_IsChatBoxTextBetween(Text: String; StartLine, EndLine: Integer): Boolean;
var
  I: Integer;
Begin
  Result := True;
  For I := Max(StartLine, EndLine) Downto Min(StartLine, EndLine) Do
    If GLH_FindChatBoxText(Text, I) then
      Exit;
  Result := False;
End;

Function GLH_IsChatBoxTextAnyLineEx(Text: String; TextColour: Integer): Boolean;
Begin
  Result := GLH_IsChatBoxTextBetweenEx(Text, TextColour, 1, 8);
End;

Function GLH_IsChatBoxTextAnyLine(Text: String): Boolean;
Begin
  Result := GLH_IsChatBoxTextBetween(Text, 1, 8);
End;

Function GLH_ChatBoxTextArrayEx(TextColour: Integer): TStringArray;
var
  II: Integer;
Begin
  SetLength(Result, 9);
  For II := 8 DownTo 1 Do
    Result[II] := GLH_GetChatBoxTextEx(II, TextColour);
End;

Function GLH_ChatBoxTextArray: TStringArray;
var
  Fonts: TFontArray;
Begin
  Fonts := GLHook_GetFontsByArea(IntToBox(GLC_MCBox.X1, GLC_MCBox.Y1, GLC_MCBox.X2, GLC_MCBox.Y2 - 13));
  Result := GLHook_FontsToText(Fonts, False, 3, 14);
End;

Function GLH_GetBlackChatMessage: String;
Begin
  Result := GLH_GetChatBoxTextEx(8, clMessage);
End;

Function GLH_FindBlackChatMessage(ChatMessage: String): Boolean;
Begin
  Result := (Pos(ChatMessage, GLH_GetChatBoxTextEx(8, clMessage)) > 0);
End;

Function GLH_LastChatter(var Name: String): Boolean;
var
  I: Integer;
Begin
  Name := LowerCase(GLH_GetBlackChatMessage);
  I := Pos(':', Name);
  If (I <> 0) Then
  Begin
    Delete(Name, I, I);
    Result := True;
  End;
End;

Function GLH_GetLastChatText(var Chat: String): Boolean;
Begin
  Result := (GLH_GetChatBoxTextEx(8, clChat) <> '');
End;

Function GLH_InChat(Text: String): Boolean;
var
  S: string;
Begin
  If (Not (GLH_GetLastChatText(S))) then
    GLH_LastChatter(S);

  Result := (Pos(LowerCase(Text), Lowercase(S)) > 0);
End;

Function GLH_GetNPCChatName: String;
var
  Fonts: TFontArray;
  TextInfo: TTextInfoArray;
Begin
  Fonts := GLHook_GetFontsByArea(GLC_MCBox);
  TextInfo := GLHook_FontsToTextEx(Fonts, False, 4, 14);
  If ((Length(TextInfo) > 0) And (TextInfo[0].Colour = 7913190)) Then
    Result := TextInfo[0].Text;
End;

Function GLH_IsNPCTalking: Boolean;
Begin
  Result := (Length(GLH_GetNPCChatName) > 0);
End;

Function GLH_DoConversation(ResultText: String; ClickResult: Boolean): Boolean;
var
  T: Integer;
Begin
  While (T < 25) Do
  Begin
    If (Length(ResultText) <> 0) Then
      If (GLH_FindNPCChatText(ResultText, Nothing)) Then
      Begin
        If ClickResult Then
          GLH_ClickContinue(True, True);

        Result := True;
        Break;
      End;

    If (Not GLH_ClickContinue(True, True)) Then
      Break;

    Wait(100 + Random(200));
    Inc(T);
  End;
End;

Function GLH_PlayerChatActive: Boolean;
Begin
  Result := (Not GLH_FindChatBoxTextEx('Press Enter to Chat', 9, clBlack)) And GLH_LoggedIn;
End;
