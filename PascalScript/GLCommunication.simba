{*
  This File May NOT be Copied, Modified OR Translated for any purposes other than updating the SRL-GLHook Library.

  By: Brandon-T.
*}

{$IFDEF GLHook}
  {$loadlib GLHook}
{$ENDIF}

{*
  Structures To Hold OpenGL Information On The Simba Side.
  These Functions Are The Equivalent of Those on the C++ Side.
*}

type TModel = record
  ID: Cardinal;
  SX, SY: Integer;
  Stride: Cardinal;
  TriangleCount: Integer;
end;

type TPanelItem = record
  X, Y: Integer;
  BaseID: Integer;
  MeanID: Integer;
  TextureID: Integer;
  SX, SY: Array [0..3] Of Integer;
end;

type TTextInfo = record
  Area: TBox;
  Text: String;
  Colour: Integer;
end;

type TTextColour = Record
  Text: String;
  Areas: Array Of TBox;
  Colours: Array Of Integer;
End;

type TFontInfo = record
  ID: Cardinal;
  R, G, B, A: Byte;
  Colour: Integer;
  X, Y: Single;
  Symbol: Char;
  Shadow: Boolean;
  Translate: Array [0..2] Of Single;
  VX, VY, TX, TY: Array [0..3] Of Integer;
end;

type TModelArray = array of TModel;
type TPanelArray = array of TPanelItem;
type TFontArray = array of TFontInfo;
type TTextInfoArray = Array Of TTextInfo;
type TTextColourArray = Array Of TTextColour;
type T2DTextInfoArray = Array Of TTextInfoArray;



{*
  For PascalScript only, the following functions Iterate pointers given to Simba by GLHook
  And fills a structure with the information it receives.
*}

Function GLHook_IterateItems(Ptr, Size: Integer): TPanelArray;
var
  I, J: Integer;
Begin
  SetLength(Result, Size);
  For I := 0 To Size - 1 Do
  begin
    GLHIteratePointerInt(Ptr, Result[I].X);
    GLHIteratePointerInt(Ptr, Result[I].Y);
    GLHIteratePointerInt(Ptr, Result[I].BaseID);
    GLHIteratePointerInt(Ptr, Result[I].MeanID);
    GLHIteratePointerInt(Ptr, Result[I].TextureID);

    For J := 0 To 3 Do
      GLHIteratePointerInt(Ptr, Result[I].SX[J]);

    For J := 0 To 3 Do
      GLHIteratePointerInt(Ptr, Result[I].SY[J]);
  end;
End;

Function GLHook_IterateModels(Ptr, Size: Integer): TModelArray;
var
  I: Integer;
Begin
  For I := 0 To Size - 1 Do
  begin
    GLHIteratePointerUInt(Ptr, Result[I].ID);
    GLHIteratePointerInt(Ptr, Result[I].SX);
    GLHIteratePointerInt(Ptr, Result[I].SY);
    GLHIteratePointerUInt(Ptr, Result[I].Stride);
    GLHIteratePointerInt(Ptr, Result[I].TriangleCount);
  end;
End;

Function GLHook_IterateFonts(Ptr, Size: Integer): TFontArray;
var
  I, J: Integer;
  Symbol, Trash: Byte;
Begin
  For I := 0 To Size - 1 Do
  begin
    GLHIteratePointerUInt(Ptr, Result[I].ID);
    GLHIteratePointerByte(Ptr, Result[I].R);
    GLHIteratePointerByte(Ptr, Result[I].G);
    GLHIteratePointerByte(Ptr, Result[I].B);
    GLHIteratePointerByte(Ptr, Result[I].A);
    Result[I].Colour := RGBToColor(Result[I].R, Result[I].G, Result[I].B);
    GLHIteratePointerFloat(Ptr, Result[I].X);
    GLHIteratePointerFloat(Ptr, Result[I].Y);
    GLHIteratePointerByte(Ptr, Symbol);
    Result[I].Symbol := Chr(Symbol);
    GLHIteratePointerBool(Ptr, Result[I].Shadow);
    GLHIteratePointerByte(Ptr, Trash);  //Two bytes of padding required. Char + Boolean = 2 bytes. Total needed = 4. Thus, pad by 2.
    GLHIteratePointerByte(Ptr, Trash);

    For J := 0 To 2 Do
      GLHIteratePointerFloat(Ptr, Result[I].Translate[J]);

    For J := 0 To 3 Do
      GLHIteratePointerInt(Ptr, Result[I].VX[J]);

    For J := 0 To 3 Do
      GLHIteratePointerInt(Ptr, Result[I].VY[J]);

    For J := 0 To 3 Do
      GLHIteratePointerInt(Ptr, Result[I].TX[J]);

    For J := 0 To 3 Do
      GLHIteratePointerInt(Ptr, Result[I].TY[J]);
  end;
End;

{*
  Gets All Items on the screen. Inventory, Icons, Minimap symbols/icons, interfaces, etc..
*}

Function GLHook_GetAllItems: TPanelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetPanelItems(Size);
  SetLength(Result, Size);
  Result := GLHook_IterateItems(Ptr, Size);
end;

{*
  Gets Items with the specified ID.
  If none are found, the result is an empty array.
*}

Function GLHook_GetItemsByID(ID: Integer): TPanelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetItemsByID(ID, Size);
  SetLength(Result, Size);
  Result := GLHook_IterateItems(Ptr, Size);
end;

{*
  Gets Items within a specified area on screen.
  If none are found, the result is an empty array.
*}

Function GLHook_GetItemsByArea(Area: TBox): TPanelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetItemsByArea(Area.X1, Area.Y1, Area.X2, Area.Y2, Size);
  SetLength(Result, Size);
  Result := GLHook_IterateItems(Ptr, Size);
end;

{*
  Get Items with a specific ID within the specified area.
  If None are found, the result is an empty array.
*}

Function GLHook_GetItemsByAreaEx(ID: Integer; Area: TBox): TPanelArray;
var
  I, J, L: Integer;
  Items: TPanelArray;
Begin
  Items := GLHook_GetItemsByArea(Area);
  L := Length(Items);
  For I := 0 To L - 1 Do
    If (Items[I].BaseID = ID) Then
    Begin
      SetLength(Result, J + 1);
      Result[J] := Items[I];
      Inc(J);
    End;
End;

{*
  Gets Items using their BaseID, their MeanID and a specified Tolerance.

  The BaseID is the actual ID of the item.
  The MeanID is the Average RGB ID of the item. This allows us to distinguish every single item.
  The Tolerance is how accurate the search should be.

  If nothing is found, the result is an empty array.
*}

Function GLHook_GetItemsByMeanID(BaseID, MeanID, Tolerance: Integer): TPanelArray;
var
  I, L: Integer;
  ListOfItems: TPanelArray;
begin
  ListOfItems := GLHook_GetItemsByID(BaseID);
  L := High(ListOfItems);

  For I := 0 To L Do
    If SimilarColors(ListOfItems[I].MeanID, MeanID, Tolerance) Then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[Length(Result) - 1] := ListOfItems[I];
    end;
end;

{*
  Gets all models. If none are found, the result is an empty array.
  Examples of Models: NPCs, Banks, Walls, Buildings, Ground Items, etc..
*}

Function GLHook_GetAllModels: TModelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetModels(Size);
  SetLength(Result, Size);
  Result := GLHook_IterateModels(Ptr, Size);
end;

{*
  Gets all models with a specified ID. If none are found, the result is an empty array.
  Examples of Models: NPCs, Banks, Walls, Buildings, Ground Items, etc..
*}

Function GLHook_GetModelsByID(ID: Cardinal): TModelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetModelsByID(ID, Size);
  SetLength(Result, Size);
  Result := GLHook_IterateModels(Ptr, Size);
end;


{*
  Gets all models with a specific triangle count. If none are found, the result is an empty array.
  Examples of Models: NPCs, Banks, Walls, Buildings, Ground Items, etc..
*}

Function GLHook_GetModelsByTriangleCount(Count: Cardinal): TModelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetModelsByTCount(Count, Size);
  SetLength(Result, Size);
  Result := GLHook_IterateModels(Ptr, Size);
end;


{*
  Gets all models within a specified area on the screen.
  If none are found, the result is an empty array.
  Examples of Models: NPCs, Banks, Walls, Buildings, Ground Items, etc..
*}

Function GLHook_GetModelsByArea(Area: TBox): TModelArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetModelsByArea(Area.X1, Area.Y1, Area.X2, Area.Y2, Size);
  SetLength(Result, Size);
  Result := GLHook_IterateModels(Ptr, Size);
end;


{*
  Gets all font characters/letters displayed on screen.
  If none are found, the result is an empty array.
*}

Function GLHook_GetAllFonts: TFontArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetFonts(Size);
  SetLength(Result, Size);
  Result := GLHook_IterateFonts(Ptr, Size);
end;

{*
  Gets all fonts/characters/letters within a specified area on screen.
*}

Function GLHook_GetFontsByArea(Area: TBox): TFontArray;
var
  Ptr, Size: Integer;
begin
  Ptr := GLHGetFontsArea(Area.X1, Area.Y1, Area.X2, Area.Y2, Size);
  SetLength(Result, Size);
  Result := GLHook_IterateFonts(Ptr, Size);
end;


{*
  Needed this for Lape. I decided to keep it anyway. Returns the absolute value of a specified Integer.
*}

Function GLH_iAbs(I: Integer): Integer;
Begin
  Result := I;
  If (Result < 0) Then
    Result := Result * -1;
End;

{*
  Removes all shadows from the specified Text/Array of Characters/Letters.
  Some characters/letters are rendered with a shadow and is detected as:
  aa bb cc dd..

  Instead of:

  a b c d.        This fixes that by removing the shadows.
*}

Function GLHook_RemoveFontShadows(Fonts: TFontArray): TFontArray;
var
  I, J, L: Integer;
Begin
  L := Length(Fonts);
  If (L < 1) Then Exit;

  If ((L < 2) or (L mod 2 <> 0)) Then
  Begin
    Result := Fonts;
    Exit;
  End;

  SetLength(Result, L / 2);
  For I := 0 To L - 2 Do
  Begin
    If (Fonts[I].X - Fonts[I + 1].X = 1) Then
      Result[J] := Fonts[I + 1];

    Inc(I); Inc(J);
  End;
End;

{*
  Returns an array of TextColourInfo. Each Dimension within the array is one line of text. That line can have various different colours.
  This function returns all the information needed to determine the colour of every word/sentence within a line specified by FontArray Parameter.
  Removes Shadows if specified. MinHSpacing is the amount of spacing between each letter. MinVSpacing is the amount of spacing between each Line.

  Note: See GLH_GetChatBoxTextEx for example.
*}

Function GLHook_FontsToText1D(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): TTextColourArray;
var
  I, J, K, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Text: String;
  StoreColour: Boolean;
  SameLine, NewLine: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  SetLength(Result, 1);

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I < L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (StoreColour) Then
    Begin
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    NewLine := (iAbs(Y) >= MinVSpacing);
    If ((I < L) And (Fonts[I].Colour <> Fonts[I + 1].Colour) And (Not NewLine)) Then
    Begin
      SetLength(Result[K].Areas, Length(Result[K].Areas) + 1);
      SetLength(Result[K].Colours, Length(Result[K].Colours) + 1);
      Result[K].Text := Text;
      Result[K].Areas[J].X1 := IX;
      Result[K].Areas[J].Y1 := IY;
      Result[K].Areas[J].X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[K].Areas[J].Y2 := Round(Fonts[I].Y);
      Result[K].Colours[J] := Fonts[I].Colour;
      Inc(J);
      SameLine := True;
    End;

    If (NewLine) Then
    Begin
      SetLength(Result[K].Areas, Length(Result[K].Areas) + 1);
      SetLength(Result[K].Colours, Length(Result[K].Colours) + 1);
      If (Not SameLine) Then J := 0;

      Result[K].Text := Text;
      Result[K].Areas[J].X1 := Round(Fonts[I].X);
      Result[K].Areas[J].Y1 := Round(Fonts[I].Y - Fonts[I].VY[2]);
      Result[K].Areas[J].X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[K].Areas[J].Y2 := Round(Fonts[I].Y);
      Result[K].Colours[J] := Fonts[I].Colour;
      SetLength(Result, Length(Result) + 1);

      Text := '';
      J := 0; Inc(K);
      StoreColour := True;
      SameLine := False;
    End;
  End;
End;

{*
  Returns a 2Dimension array of TTextInfo. Although rarely needed, it is needed in some cases. This function determines
  the colour of every Letter/Word/Sentence within a line of text. If Multiple lines are passed, it will parse them all.
  Each Index in the array will have one line of text and an array of all colours/coloured-text found within that line as well
  as their positions.

  The usage of this function is similar to that of GLHook_FontsToText1D. See GLH_GetChatBoxTextEx for an example.
*}

Function GLHook_FontsToText2D(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): T2DTextInfoArray;
var
  I, J, K, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Text: String;
  StoreColour: Boolean;
  TextInfo: TTextInfoArray;
  SameLine, NewLine: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I < L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If StoreColour Then
    Begin
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    NewLine := (iAbs(Y) >= MinVSpacing);
    If ((I < L) And (Fonts[I].Colour <> Fonts[I + 1].Colour) And (Not NewLine)) Then   //If Different Colours On Line..
    Begin                                                                              //Append The Current Text To The Array..
      SetLength(TextInfo, Length(TextInfo) + 1);
      TextInfo[J].Text := Text;
      TextInfo[J].Area.X1 := IX;
      TextInfo[J].Area.Y1 := IY;
      TextInfo[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      TextInfo[J].Area.Y2 := Round(Fonts[I].Y);
      TextInfo[J].Colour := Fonts[I].Colour;
      Inc(J);
      Text := '';
      SameLine := True;
    End;

    If (NewLine) Then                     //If There's a New-Line, Append To The Current Text, Push It To The Result, Reset Everything.
    Begin
      SetLength(TextInfo, Length(TextInfo) + 1);
      If (Not SameLine) Then J := 0;

      TextInfo[J].Text := Text;
      TextInfo[J].Area.X1 := Round(Fonts[I].X);
      TextInfo[J].Area.Y1 := Round(Fonts[I].Y - Fonts[I].VY[2]);
      TextInfo[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      TextInfo[J].Area.Y2 := Round(Fonts[I].Y);
      TextInfo[J].Colour := Fonts[I].Colour;

      SetLength(Result, Length(Result) + 1);
      Result[K] := TextInfo;                   //Each Array Is One Line Of Text With A List Of All Colours.

      Text := '';
      J := 0; Inc(K);
      StoreColour := True;
      SameLine := False;
      SetLength(TextInfo, 0);
    End;
  End;
End;

{*
  This function returns an array of TTextInfo. Each Index in the array will contain a portion of text with it's position on the screen as well
  as the colours of the text within that line.
*}

Function GLHook_FontsToColourText(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TTextInfoArray;
var
  I, J, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Colour: Integer;
  Text: String;
  StoreColour: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 127)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (StoreColour) Then
    Begin
      Colour := Fonts[I].Colour;
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    If ((iAbs(Y) >= MinVSpacing) Or ((I + 1 <= L) And (Fonts[I + 1].Colour <> Colour))) Then
    Begin
      SetLength(Result, Length(Result) + 1);
      Result[J].Text := Text;
      Result[J].Area.X1 := IX;
      Result[J].Area.Y1 := IY;
      Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[J].Area.Y2 := Round(Fonts[I].Y);
      Result[J].Colour := Fonts[I].Colour;
      Inc(J);
      Text := '';
      StoreColour := True;
    End;
  End;
End;

{*
  This function returns an array of TTextInfo. It is probably one of the most used functions for text recognition.
  Each index in the array will contain the bounding box around the text displayed on screen as well as it's colour info and the text itself.
*}

Function GLHook_FontsToTextEx(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TTextInfoArray;
var
  I, J, L: Integer;
  X, Y: Integer;
  IX, IY: Integer;
  Text: String;
  StoreColour: Boolean;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  StoreColour := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (StoreColour) Then
    Begin
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      StoreColour := False;
    End;

    If (iAbs(Y) >= MinVSpacing) Then
    Begin
      SetLength(Result, Length(Result) + 1);
      Result[J].Text := Text;
      Result[J].Area.X1 := IX;
      Result[J].Area.Y1 := IY;
      Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[J].Area.Y2 := Round(Fonts[I].Y);
      Result[J].Colour := Fonts[I].Colour;
      Inc(J);
      Text := '';
      StoreColour := True;
    End;
  End;
End;

{*
  This function returns an array of strings from a given FontArray. It splits text horizontally and vertically.
  Each string within the array is one line of text. MinHSpacing and MinVSpacing specifies how the function will split.
*}

Function GLHook_FontsToText(var Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TStringArray;
var
  I, L: Integer;
  X, Y: Integer;
  Text: String;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    Text := Text + Fonts[I].Symbol;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (iAbs(Y) >= MinVSpacing) Then
      Text := Text + '\n\r';
  End;

  ExplodeWrap('\n\r', Text, Result);
  For I := 0 To High(Result) Do
    Result[I] := Trim(Result[I]);
End;

{*
  For those requiring the most powerful, accurate and most efficient text recognition line by line, it does not get any better than this.
  This function will split a fontarray into lines taking speed into consideration as well as the position of each character.
  This function will return an array of TTextInfo which will contain the colour of the text within that line as well as each line found,
  and the area in which it was found on the screen.

  P.S. Most of the time this function isn't necessary but it's definitely good to have more power, options, speed, and accuracy.
*}

Function GLHook_SplitFontsHorizontallyEx(Fonts: TFontArray; Shadow: Boolean; MinHSpacing: Integer; MinVSpacing: Integer): TTextInfoArray;
var
  X, Y, I, J, L, IX, IY: Integer;
  MinHeight, MaxHeight: Single;
  NewLine: Boolean;
  Text: String;
Begin
  If (Shadow) Then
    Fonts := GLHook_RemoveFontShadows(Fonts);

  L := High(Fonts);
  If (L < 1) Then Exit;
  NewLine := True;

  For I := 0 To L Do
  Begin
    If (Not InRange(Ord(Fonts[I].Symbol), 32, 126)) Then
    Begin
      Text := Text + ' ';
      Continue;
    End;

    If (NewLine) Then
    Begin
      Text := '';
      IX := Round(Fonts[I].X);
      IY := Round(Fonts[I].Y - Fonts[I].VY[2]);
      MinHeight := Fonts[I].Y - Round(MinVSpacing / 2);
      MaxHeight := Fonts[I].Y + Round(MinVSpacing / 2);
      NewLine := False;
    End;

    If (L > 1) And (I + 1 <= L) Then
    Begin
      X := Round(Fonts[I + 1].X - (Fonts[I].X + Fonts[I].VX[2]));
      Y := Round(Fonts[I + 1].Y - Fonts[I].Y);
    End Else
      Begin
        X := Round(-Fonts[I].X);
        Y := Round(Fonts[I].Y);
      End;

    If ((Fonts[I].Y >= MinHeight) And (Fonts[I].Y <= MaxHeight)) Then
      Text := Text + Fonts[I].Symbol
    Else
      Begin
        Dec(I);
        SetLength(Result, J + 1);
        Result[J].Text := Text;
        Result[J].Area.X1 := IX;
        Result[J].Area.Y1 := IY;
        Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
        Result[J].Area.Y2 := Round(Fonts[I].Y);
        Result[J].Colour := Fonts[I].Colour;
        Inc(J);
        NewLine := True;
      End;

    If (iAbs(X) >= MinHSpacing) Then
      Text := Text + ' ';

    If (I = L) Then
    Begin
      SetLength(Result, J + 1);
      Result[J].Text := Text;
      Result[J].Area.X1 := IX;
      Result[J].Area.Y1 := IY;
      Result[J].Area.X2 := Round(Fonts[I].X + Fonts[I].VX[2]);
      Result[J].Area.Y2 := Round(Fonts[I].Y);
      Result[J].Colour := Fonts[I].Colour;
    End;
  End;
End;

{*
  Finds a specified string within an array and returns where it is found as well as if it was found.
  Needed this for Lape.
*}
Function PosStrArr(ToFind: String; SearchArray: TStringArray; Var Where: Integer): Boolean;
var
  I, H: Integer;
Begin
  H := High(SearchArray);
  For I := 0 To H Do
    If (Pos(LowerCase(ToFind), LowerCase(SearchArray[I])) > 0) Then
    Begin
      Where := I;
      Result := True;
      Break;
    End;
End;

{*
  Counts the specified text within the specified area.
  The result is the amount of times the specified text was found within the specified area.
  If no text is found, the result is 0.
*}

Function GLHook_CountTextInArea(Area: TBox; Text: String; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): Integer;
Var
  I, J: Integer;
  Fonts: TFontArray;
  AreaFonts: TStringArray;
Begin
  Text := Lowercase(Text);
  Fonts := GLHook_GetFontsByArea(Area);
  AreaFonts := GLHook_FontsToText(Fonts, Shadow, MinHSpacing, MinVSpacing);
  For I := 0 To High(AreaFonts) Do
    For J := 1 To High(AreaFonts[I]) Do
      If (AreaFonts[I][J] = Text) Then
        Inc(Result);
End;

{*
  Returns whether a specified array of strings are found within a specified area.
  Also returns the position of the found text. Point(-1, -1) is returned if nothing is found.
*}

Function GLHook_FindTextAreaEx(var P: TPoint; Area: TBox; Texts: TStringArray; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): Boolean;
var
  H, I, J, L: Integer;
  Fonts: TFontArray;
  AreaText: TTextInfoArray;
Begin
  Fonts := GLHook_GetFontsByArea(Area);
  AreaText := GLHook_FontsToTextEx(Fonts, Shadow, MinHSpacing, MinVSpacing);

  H := High(AreaText);
  L := High(Texts);

  For I := 0 To L Do
    For J := 0 To H Do
      If (Pos(Texts[I], AreaText[J].Text) > 0) Then
      Begin
        P := MiddleBox(AreaText[J].Area);
        Result := True;
        Exit;
      End;
  P := Point(-1, -1);
  Result := False;
End;

{*
  Finds a specified string within a specified area. If found, the result is true and the position where the text was found.
  Point(-1, -1) is return if nothing is found.
*}

Function GLHook_FindTextArea(var P: TPoint; Area: TBox; Text: String; Shadow: Boolean; MinHSpacing, MinVSpacing: Integer): Boolean;
Begin
  Result := GLHook_FindTextAreaEx(P, Area, [Text], Shadow, MinHSpacing, MinVSpacing);
End;
